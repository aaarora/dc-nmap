#!/usr/bin/python3
import discord
from discord.ext import tasks
import json
import nmap
import asyncio
import logging

nm = nmap.PortScanner()

#Logging
logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)

def flatten_dict(dd, separator='_', prefix=''):
    return { prefix + separator + k if prefix else k : v
             for kk, vv in dd.items()
             for k, v in flatten_dict(vv, separator, kk).items()
             } if isinstance(dd, dict) else { prefix : dd }

class AlertBot(discord.Client):
    def __init__(self, mac, channel_id, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.bg_task = self.send_alert.start()
        self.mac = mac
        self.channel_id = channel_id

    async def on_ready(self):
        print(f'{self.user} is now connected to {self.guilds[0]}')

    @tasks.loop(seconds=300)
    async def send_alert(self):
        at_home = False
        scan = nm.scan('192.168.1.0/24', arguments='-n -sP -PE -T5')
        channel = self.get_channel(self.channel_id)
        if (not at_home) and (self.mac in flatten_dict(scan).values()):
            await channel.send('UH OH')
            at_home = True
        if (self.mac not in flatten_dict(scan).values()):
            at_home = False

    @send_alert.before_loop
    async def before_my_task(self):
        await self.wait_until_ready()

if __name__ == "__main__":
    conf = json.load(open('config.json'))
    client = AlertBot(conf['mac'], conf['channel_id'])
    client.run(conf['TOKEN'])
